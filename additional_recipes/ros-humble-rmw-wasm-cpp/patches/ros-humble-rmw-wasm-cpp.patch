diff --git a/rmw_wasm_cpp/CMakeLists.txt b/rmw_wasm_cpp/CMakeLists.txt
index 9069d62..6197f60 100644
--- a/rmw_wasm_cpp/CMakeLists.txt
+++ b/rmw_wasm_cpp/CMakeLists.txt
@@ -55,6 +55,7 @@ set(${PROJECT_NAME}_SOURCES
   src/rmw_gid.cpp
   src/rmw_qos.cpp
   src/rmw_log.cpp
+  src/rmw_get_network_flow_endpoints.cpp
 )
 
 add_library(${PROJECT_NAME} SHARED ${${PROJECT_NAME}_SOURCES})
@@ -83,11 +83,8 @@ ament_target_dependencies(${PROJECT_NAME}
   rmw
   wasm_cpp
   rcpputils
-  rcutils
   dynmsg
-  rosidl_runtime_c
   rosidl_runtime_cpp
-  rosidl_typesupport_introspection_c
   rosidl_typesupport_introspection_cpp
 )
 
@@ -96,11 +93,8 @@ ament_export_dependencies(
   rmw
   wasm_cpp
   rcpputils
-  rcutils
   dynmsg
-  rosidl_runtime_c
   rosidl_runtime_cpp
-  rosidl_typesupport_introspection_c
   rosidl_typesupport_introspection_cpp
 )
 
diff --git a/rmw_wasm_cpp/src/rmw_get_network_flow_endpoints.cpp b/rmw_wasm_cpp/src/rmw_get_network_flow_endpoints.cpp
new file mode 100644
index 0000000..381f3db
--- /dev/null
+++ b/rmw_wasm_cpp/src/rmw_get_network_flow_endpoints.cpp
@@ -0,0 +1,46 @@
+// Copyright 2023 Open Source Robotics Foundation, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include "rmw/get_network_flow_endpoints.h"
+
+extern "C"
+{
+///==============================================================================
+/// Get network flow endpoints of a publisher
+rmw_ret_t
+rmw_publisher_get_network_flow_endpoints(
+  const rmw_publisher_t * publisher,
+  rcutils_allocator_t * allocator,
+  rmw_network_flow_endpoint_array_t * network_flow_endpoint_array)
+{
+  (void) publisher;
+  (void) allocator;
+  (void) network_flow_endpoint_array;
+  return RMW_RET_UNSUPPORTED;
+}
+
+///==============================================================================
+/// Get network flow endpoints of a subscription
+rmw_ret_t
+rmw_subscription_get_network_flow_endpoints(
+  const rmw_subscription_t * subscription,
+  rcutils_allocator_t * allocator,
+  rmw_network_flow_endpoint_array_t * network_flow_endpoint_array)
+{
+  (void) subscription;
+  (void) allocator;
+  (void) network_flow_endpoint_array;
+  return RMW_RET_UNSUPPORTED;
+}
+}  // extern "C"
diff --git a/rmw_wasm_cpp/src/rmw_node.cpp b/rmw_wasm_cpp/src/rmw_node.cpp
index 22db044..d545538 100644
--- a/rmw_wasm_cpp/src/rmw_node.cpp
+++ b/rmw_wasm_cpp/src/rmw_node.cpp
@@ -189,4 +189,42 @@ extern "C"
         return rmw_node->context->impl->graph_guard_condition;
     }
 
+    //==============================================================================
+    /// Wait until all published message data is acknowledged or until the specified timeout elapses.
+    rmw_ret_t
+    rmw_publisher_wait_for_all_acked(
+      const rmw_publisher_t * publisher,
+      rmw_time_t wait_timeout)
+    {
+      static_cast<void>(publisher);
+      static_cast<void>(wait_timeout);
+      return RMW_RET_UNSUPPORTED;
+    }
+
+    //==============================================================================
+    /// Retrieve the content filter options of the subscription.
+    rmw_ret_t
+    rmw_subscription_get_content_filter(
+      const rmw_subscription_t * subscription,
+      rcutils_allocator_t * allocator,
+      rmw_subscription_content_filter_options_t * options)
+    {
+      static_cast<void>(subscription);
+      static_cast<void>(allocator);
+      static_cast<void>(options);
+      return RMW_RET_UNSUPPORTED;
+    }
+
+    //==============================================================================
+    /// Set the content filter options for the subscription.
+    rmw_ret_t
+    rmw_subscription_set_content_filter(
+      rmw_subscription_t * subscription,
+      const rmw_subscription_content_filter_options_t * options)
+    {
+      static_cast<void>(subscription);
+      static_cast<void>(options);
+      return RMW_RET_UNSUPPORTED;
+    }
+
 }  // extern "C"

