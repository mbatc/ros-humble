diff --git a/CMakeLists.txt b/CMakeLists.txt
index 11462f11..257a6d4a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -18,14 +18,10 @@ include(cmake/get_default_rcl_logging_implementation.cmake)
 get_default_rcl_logging_implementation(RCL_LOGGING_IMPL)
 
 # Default to C11
-if(NOT CMAKE_C_STANDARD)
-  set(CMAKE_C_STANDARD 11)
-endif()
+set(CMAKE_C_STANDARD 11)
 
 # Default to C++14
-if(NOT CMAKE_CXX_STANDARD)
-  set(CMAKE_CXX_STANDARD 14)
-endif()
+set(CMAKE_CXX_STANDARD 14)
 
 if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
   add_compile_options(-Wall -Wextra -Wpedantic)
@@ -71,16 +67,39 @@ target_include_directories(${PROJECT_NAME} PUBLIC
   "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
   "$<INSTALL_INTERFACE:include/${PROJECT_NAME}>")
 # specific order: dependents before dependencies
+
 ament_target_dependencies(${PROJECT_NAME}
-  "rcl_interfaces"
-  "rcl_logging_interface"
-  "rcl_yaml_param_parser"
-  "rcutils"
-  "rmw"
-  "rmw_implementation"
+#   "rcl_interfaces"
+#   "rcl_logging_interface"
+#   "rcl_yaml_param_parser"
+#   "rcutils"
+#   "rmw"
+#   "rmw_implementation"
   ${RCL_LOGGING_IMPL}
-  "rosidl_runtime_c"
-  "tracetools"
+#   "rosidl_runtime_c"
+#   "tracetools"
+)
+
+target_include_directories(${PROJECT_NAME} PUBLIC
+  ${rcl_interfaces_INCLUDE_DIRS}
+  ${rcl_logging_interface_INCLUDE_DIRS}
+  ${rcl_yaml_param_parser_INCLUDE_DIRS}
+  ${rcutils_INCLUDE_DIRS}
+  ${rmw_INCLUDE_DIRS}
+  ${rmw_implementation_INCLUDE_DIRS}
+  ${rosidl_runtime_c_INCLUDE_DIRS}
+  ${tracetools_INCLUDE_DIRS}
+)
+
+target_link_libraries(${PROJECT_NAME} 
+  ${rcl_interfaces_LIBRARIES}
+  ${rcl_logging_interface_LIBRARIES}
+  # ${rcl_yaml_param_parser_LIBRARIES}
+  ${rcutils_LIBRARIES}
+  ${rmw_LIBRARIES}
+  ${rmw_implementation_LIBRARIES}
+  ${rosidl_runtime_c_LIBRARIES}
+  ${tracetools_LIBRARIES}
 )
 
 # Causes the visibility macros to use dllexport rather than dllimport,
diff --git a/src/rcl/context.c b/src/rcl/context.c
index 5414cc5e..b082aa01 100644
--- a/src/rcl/context.c
+++ b/src/rcl/context.c
@@ -35,7 +35,7 @@ rcl_get_zero_initialized_context(void)
   // this is not constexpr so it cannot be in the struct initialization
   context.global_arguments = rcl_get_zero_initialized_arguments();
   // ensure assumption about static storage
-  static_assert(
+  _Static_assert(
     sizeof(context.instance_id_storage) >= sizeof(atomic_uint_least64_t),
     "expected rcl_context_t's instance id storage to be >= size of atomic_uint_least64_t");
   // initialize atomic
